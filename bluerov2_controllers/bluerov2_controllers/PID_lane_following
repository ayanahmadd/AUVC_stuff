#base imports - just to access functions, pre-existing stuff
import rclpy
from rclpy.node import Node
from std_msgs.msg import Float64
from mavros_msgs.msg import ManualControl
from bluerov2_controllers import PIDController
from bluerov2_opencv import lane_detection_functions
from bluerov2_opencv import lane_following

#same imports as rosmav camera publisher node - just to avoid errors
from sensor_msgs.msg import Image
import gi
from cv_bridge import CvBridge
import numpy as np

class StickToClosestLane(Node):
    def __init__(self):
        super().__init__("following_lanes_node")

        self.pid = PIDController.PIDController(kp=70.0, ki=2.5, kd=5,
                                 setpoint=0.0, dt=0.1)

        #self.publisher = self.create_publisher(Image, "bluerov2/camera", 10)
        #Turn the images into lanes to track
        self.sub = self.create_subscription(
            Image,        # the message type
            "bluerov2/camera",    # the topic name,
            self.translate_image,  # the subscription's callback method
            10              # QOS (will be covered later)
        )

        self.pub = self.create_publisher(
            ManualControl,
            "/manual_control",
            10
        )

    def translate_image(self):
        msg = Image()


def main():
    rclpy.init()
    node = StickToClosestLane()
    try:
        rclpy.spin(node)
    finally:
        node.destroy_node()
        rclpy.shutdown()

if __name__ == '__main__':
    main()